package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/daividpaulo/go-lang-wiki/architecture/api/api_graphql/graph/model"
)

// CreateNode is the resolver for the createNode field.
func (r *mutationResolver) CreateNode(ctx context.Context, input model.NewNode) (*model.Node, error) {
	panic(fmt.Errorf("not implemented: CreateNode - createNode"))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context) ([]*model.Node, error) {
	nodes := make([]*model.Node, 0)

	node1 := &model.Node{
		ID:   "123",
		Name: "Mari",
	}

	node2 := &model.Node{
		ID:   "456",
		Name: "Barueri",
	}

	nodes = append(nodes, node1)
	nodes = append(nodes, node2)

	return nodes, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
